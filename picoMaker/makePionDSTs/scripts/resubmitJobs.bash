#! /bin/bash

# This script runs through a list of output files. If the output file is missing
# it assumes that the job failed for some reason, and resubmits it. The script is
# called with: resubmitJobs [sessionFile] [outFileMask] [nJobs] [finishedFiles]
#
# [sessionFile] is the file that is generated by the scheduler when you submit your
# xml file. It is of the form [$JOBID].session.xml 
#
# [outFileMask] tells the script what the output file names look like. It should
# be something like /gpfs/mnt/gpfs01/star/scratch/userName/outputDirectory/outputFile_
# the script assumes the output files are numbered sequentially after the outFileMask
#
# [nJobs] is just the expected number of jobs. If nJobs is 1500, it will look for 
# output files numbered 0 through 1499, and resubmit jobs for any it doesn't find.
# This argument is optional. If you don't supply it, the script will open the 
# dataset file and determine the total number of jobs.


sessionFile=$1
outFileMask=$2
nJobs=$3
finishedFiles=$4


jobID=`basename $sessionFile .session.xml`
dataSetFile=sched${jobID}.dataset
if [[ -z "$3" ]]
then
    nJobs=`grep ^: $dataSetFile | wc -l`
    nJobs=$[$nJobs-1]
fi

resubmitCounter=0

for((i=0; i <= ($nJobs - 1); i++))
do
	outFile=${outFileMask}${i}.log

#	if ! grep -q $outFile $finishedFiles
#	then
#		resubmitString+=${i},
#	fi

#   This one checks for finished output files directly
	if [ ! -f $outFile ]
	then
		resubmitString+=${i},
        resubmitCounter=$[$resubmitCounter+1]
	fi

done

resubmitString=${resubmitString:0:${#resubmitString}-1} # Strip the last comma off the string

echo "Found $resubmitCounter out of $nJobs jobs to be resubmitted. Resubmit them? (y/n)"
read yesNo

if [ $yesNo == "y" ]; then
    echo "star-submit -r $resubmitString $sessionFile" 
    star-submit -r $resubmitString $sessionFile 
fi
